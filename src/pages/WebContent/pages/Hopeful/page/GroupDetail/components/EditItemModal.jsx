import React, { useState, useEffect, useRef } from "react";
import {
  Modal,
  ModalContent,
  ModalHeader,
  ModalBody,
  ModalFooter,
  Input,
  Button,
  Textarea,
  Image,
  Select,
  SelectItem,
  Chip,
  Switch,
} from "@nextui-org/react";
import fetchProtectedData from "../../../../../../../../utils/fetchData"; // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API
import { URLS } from "@/config"; // URL ‡∏Ç‡∏≠‡∏á API
import { toastError, toastSuccess, toastWarning } from "@/component/Alert";
import { getUniqueData, getFilteredGroups } from "../../../utils/filter";
const months = [
  "‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°",
  "‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå",
  "‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°",
  "‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô",
  "‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°",
  "‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô",
  "‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°",
  "‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°",
  "‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô",
  "‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°",
  "‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô",
  "‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°",
];

const EditItemModal = ({
  isOpen,
  onClose,
  item,
  fetchItems,
  onEditOpenChange,
}) => {
  const [itemName, setItemName] = useState("");
  const [itemDescription, setItemDescription] = useState("");
  const [driveLink, setDriveLink] = useState("");
  const [itemImage, setItemImage] = useState(null);
  const [selectedMonth, setSelectedMonth] = useState(""); // state ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
  const [isLoading, setIsLoading] = useState(false);
  const [isEnabled, setIsEnabled] = useState(false);
  const fileInputRef = useRef(null); // ‡πÉ‡∏ä‡πâ Ref ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö input file

  useEffect(() => {
    if (item) {
      setItemName(item.item_name || "");
      setItemDescription(item.item_description || "");
      setDriveLink(item.drive_link || "");
      setItemImage(item.item_image || null);
      setIsEnabled(item.item_status || "");

      if (item.item_date) {
        // ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≤‡∏Å UTC ‡πÑ‡∏õ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡∏≠‡∏á‡πÑ‡∏ó‡∏¢ ‡πÇ‡∏î‡∏¢‡∏ö‡∏ß‡∏Å 7 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
        const utcDate = new Date(item.item_date);
        const thaiDate = new Date(utcDate.getTime() + 7 * 60 * 60 * 1000);

        // ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (0-11)
        const monthIndex = thaiDate.getMonth();
        if (monthIndex >= 0 && monthIndex < 12) {
          setSelectedMonth(months[monthIndex]);
        } else {
          setSelectedMonth("");
        }
      }
    }
  }, [item]);

  const handleFileChange = (e) => {
    const selectedFile = e.target.files[0];
    if (selectedFile) {
      setItemImage(selectedFile);
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å state ‡πÅ‡∏•‡∏∞‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤ input file
  const handleRemoveImage = () => {
    setItemImage(null);
    if (fileInputRef.current) {
      fileInputRef.current.value = "";
    }
  };

  const handleSaveItem = async () => {
    if (!item || !item.item_id) {
      console.error("Error: item_id is missing!");
      return;
    }
    if (!itemImage) {
      toastWarning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û");
      return;
    }

    setIsLoading(true);

    try {
      const formData = new FormData();
      formData.append("item_id", item.item_id);
      formData.append("item_name", itemName || "");
      formData.append("item_description", itemDescription || "");
      formData.append("drive_link", driveLink || "");
      formData.append("item_status", isEnabled ? 1 : 0);

      // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà string URL) ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢
      if (itemImage && typeof itemImage !== "string") {
        formData.append("image", itemImage);
      }

      // ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì item_date ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏õ‡∏µ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô, ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏ô "01"
      if (selectedMonth) {
        const monthIndex = months.indexOf(selectedMonth); // 0-11
        const currentYear = new Date().getFullYear();
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö UTC ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ Date.UTC (‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà 0)
        const utcDate = new Date(Date.UTC(currentYear, monthIndex, 1));
        // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô string ISO ‡πÅ‡∏•‡πâ‡∏ß‡∏ï‡∏±‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡πà‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà (YYYY-MM-DD)
        const formattedDate = utcDate.toISOString().split("T")[0];
        console.log(formattedDate);

        formData.append("item_date", formattedDate);
      }

      const response = await fetchProtectedData.put(
        URLS.WebContent.updateItem,
        formData,
        { headers: { "Content-Type": "multipart/form-data" } }
      );

      if (!response || response.status !== 200) {
        throw new Error("Failed to update item");
      }

      console.log("Item updated successfully:", response.data);

      if (fetchItems) {
        await fetchItems(); // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏™‡∏£‡πá‡∏à
      }

      onClose();
    } catch (error) {
      console.error("Error updating item:", error);
      toastError("‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <Modal
      isOpen={isOpen}
      onClose={onClose}
      onOpenChange={onEditOpenChange}
      className="max-h-[750px] overflow-y-auto"
    >
      <ModalContent>
        <ModalHeader>üìù ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Item</ModalHeader>
        <ModalBody>
          <Input
            clearable
            underlined
            fullWidth
            label="‡∏ä‡∏∑‡πà‡∏≠ Item"
            value={itemName}
            onChange={(e) => setItemName(e.target.value)}
          />
          <Textarea
            clearable
            underlined
            fullWidth
            label="‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢"
            value={itemDescription}
            onChange={(e) => setItemDescription(e.target.value)}
          />
          <Input
            clearable
            underlined
            fullWidth
            label="‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° (Google Drive)"
            placeholder="‡∏ß‡∏≤‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà"
            value={driveLink}
            onChange={(e) => setDriveLink(e.target.value)}
          />

          {/* ‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô */}
          <Select
            label="‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"
            selectedKeys={new Set([selectedMonth])}
            onSelectionChange={(keys) => {
              // keys ‡πÄ‡∏õ‡πá‡∏ô Set ‡∏î‡∏±‡∏á‡∏ô‡∏±‡πâ‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô array ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡πÅ‡∏£‡∏Å
              const month = Array.from(keys)[0] || "";
              setSelectedMonth(month);
            }}
          >
            {months.map((month) => (
              <SelectItem key={month} value={month}>
                {month}
              </SelectItem>
            ))}
          </Select>

          <div className="flex items-center justify-between mt-4">
            <span>‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Aclog</span>{" "}
            <Chip
              color={isEnabled ? "success" : "danger"}
              className="text-white"
            >
              {isEnabled ? "‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå" : "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå"}
            </Chip>
            <Switch
              isSelected={isEnabled}
              onChange={() => setIsEnabled((prev) => !prev)}
            />
          </div>

          {/* ‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û */}
          <div className="border-2 border-dashed border-gray-400 p-4 flex flex-col items-center justify-center min-h-[200px] mt-4">
            {itemImage ? (
              <div className="relative flex flex-col items-center">
                <Image
                  src={
                    typeof itemImage === "string"
                      ? itemImage
                      : URL.createObjectURL(itemImage)
                  }
                  alt="preview"
                  className="max-w-full max-h-[200px] object-contain rounded cursor-pointer"
                  onClick={() => fileInputRef.current.click()}
                />
                <p
                  className="text-sm mt-2 cursor-pointer"
                  onClick={() => fileInputRef.current.click()}
                >
                  ‡∏Å‡∏î‡∏ó‡∏µ‡πà‡∏£‡∏π‡∏õ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
                </p>
                <Button auto flat color="error" onPress={handleRemoveImage}>
                  ‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
                </Button>
              </div>
            ) : (
              <label
                htmlFor="itemImageUpload"
                className="cursor-pointer flex flex-col items-center"
              >
                üì∑ ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
              </label>
            )}
            <input
              ref={fileInputRef}
              id="itemImageUpload"
              type="file"
              accept="image/*"
              className="hidden"
              onChange={handleFileChange}
            />
          </div>
        </ModalBody>

        <ModalFooter>
          <Button auto flat color="error" onPress={onClose}>
            ‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
          </Button>
          <Button auto onPress={handleSaveItem} isLoading={isLoading}>
            üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
          </Button>
        </ModalFooter>
      </ModalContent>
    </Modal>
  );
};

export default EditItemModal;
