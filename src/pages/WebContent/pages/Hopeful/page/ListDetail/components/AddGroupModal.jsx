import React, { useState } from "react";
import {
  Modal,
  ModalContent,
  ModalHeader,
  ModalBody,
  ModalFooter,
  Input,
  Button,
  Select,
  SelectItem,
} from "@nextui-org/react";
import fetchProtectedData from "../../../../../../../../utils/fetchData";
import { URLS } from "@/config";
import { toastError, toastSuccess, toastWarning } from "@/component/Alert";

const months = [
  "‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°",
  "‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå",
  "‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°",
  "‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô",
  "‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°",
  "‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô",
  "‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°",
  "‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°",
  "‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô",
  "‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°",
  "‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô",
  "‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°",
];

const currentYear = new Date().getFullYear();
const years = Array.from({ length: 11 }, (_, i) => String(currentYear - 5 + i));

const AddGroupModal = ({
  isOpen,
  onOpenChange,
  onClose,
  listId,
  fetchGroups,
}) => {
  const [groupName, setGroupName] = useState("");
  const [groupCategory, setGroupCategory] = useState("");
  const [groupDescription, setGroupDescription] = useState("");
  const [groupImage, setGroupImage] = useState(null);
  const [selectedYear, setSelectedYear] = useState(""); // ‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏µ
  const [isLoading, setIsLoading] = useState(false);

  const handleFileChange = (e) => {
    setGroupImage(e.target.files[0]);
  };

  const handleSaveGroup = async () => {
    if (!listId) {
      console.error("Error: listId is missing!");
      return;
    }

    if (!groupImage) {
      toastWarning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û");
      return;
    }

    const formattedDate = `${selectedYear}-01-01`; // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô YYYY-MM-DD ‡πÇ‡∏î‡∏¢‡πÉ‡∏´‡πâ‡∏ß‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô 01 ‡πÄ‡∏™‡∏°‡∏≠

    setIsLoading(true);
    const formData = new FormData();
    formData.append("list_id", listId);
    formData.append("group_name", groupName);
    formData.append("group_category", groupCategory);
    formData.append("group_description", groupDescription);
    formData.append("group_date", formattedDate); // ‚úÖ ‡∏™‡πà‡∏á `group_date` ‡πÑ‡∏õ‡∏ó‡∏µ‡πà API

    if (groupImage) {
      formData.append("image", groupImage);
    }

    try {
      // ‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á API
      const response = await fetchProtectedData.post(
        URLS.WebContent.createGroup,
        formData,
        {
          headers: { "Content-Type": "multipart/form-data" },
        }
      );

      if (!response || response.status !== 200) {
        throw new Error("Failed to create group");
      }

      console.log("Group created successfully:", response.data);

      // ‚úÖ ‡∏£‡∏µ‡πÇ‡∏´‡∏•‡∏î Groups ‡πÉ‡∏ô ListDetail ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      if (fetchGroups) {
        await fetchGroups();
      }

      // ‚úÖ ‡∏õ‡∏¥‡∏î Modal ‡πÅ‡∏•‡∏∞‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡πà‡∏≤
      setGroupName("");
      setGroupCategory("");
      setGroupDescription("");
      setGroupImage(null);
      setSelectedYear("");
      onClose();
    } catch (error) {
      console.error("Error creating group:", error);
      toastError("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    } finally {
      setIsLoading(false);
      toastSuccess("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    }
  };

  return (
    <Modal isOpen={isOpen} onOpenChange={onOpenChange}>
      <ModalContent>
        {() => (
          <>
            <ModalHeader>
              <h2 className="text-xl">‡∏™‡∏£‡πâ‡∏≤‡∏á Group ‡πÉ‡∏´‡∏°‡πà</h2>
            </ModalHeader>
            <ModalBody>
              <Input
                clearable
                underlined
                fullWidth
                label="‡∏ä‡∏∑‡πà‡∏≠ Group"
                placeholder="‡∏ä‡∏∑‡πà‡∏≠ Group"
                value={groupName}
                onChange={(e) => setGroupName(e.target.value)}
              />

              <Input
                clearable
                underlined
                fullWidth
                label="‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà"
                placeholder="‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà"
                value={groupCategory}
                onChange={(e) => setGroupCategory(e.target.value)}
                className="mt-4"
              />

              <Input
                clearable
                underlined
                fullWidth
                label="‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î Group"
                placeholder="‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°"
                value={groupDescription}
                onChange={(e) => setGroupDescription(e.target.value)}
                className="mt-4"
              />

              {/* ‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏õ‡∏µ */}
              <div className="flex gap-4 mt-4">
                <Select
                  label="‡∏õ‡∏µ"
                  selectedKeys={[selectedYear]}
                  onChange={(e) => setSelectedYear(e.target.value)}
                >
                  {years.map((year) => (
                    <SelectItem key={year} value={year}>
                      {year}
                    </SelectItem>
                  ))}
                </Select>
              </div>

              {/* ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û */}
              <div className="border-2 border-dashed border-gray-400 p-4 flex flex-col items-center justify-center min-h-[200px] mt-4">
                {groupImage ? (
                  <div className="relative">
                    <img
                      src={URL.createObjectURL(groupImage)}
                      alt="preview"
                      className="max-w-full max-h-[200px] object-contain rounded cursor-pointer"
                      onClick={() =>
                        document.getElementById("groupImageUpload").click()
                      }
                    />
                  </div>
                ) : (
                  <label
                    htmlFor="groupImageUpload"
                    className="cursor-pointer flex flex-col items-center"
                  >
                    üì∑ ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
                  </label>
                )}
                <input
                  id="groupImageUpload"
                  type="file"
                  accept="image/*"
                  className="hidden"
                  onChange={handleFileChange}
                />
              </div>
            </ModalBody>

            <ModalFooter>
              <Button auto flat color="error" onPress={onClose}>
                ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
              </Button>
              <Button auto onPress={handleSaveGroup} isLoading={isLoading}>
                ‡∏™‡∏£‡πâ‡∏≤‡∏á
              </Button>
            </ModalFooter>
          </>
        )}
      </ModalContent>
    </Modal>
  );
};

export default AddGroupModal;
